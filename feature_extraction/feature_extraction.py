# -*- coding: UTF-8 -*-.
import argparse
import os
import pefile
import peutils
#
# General Sample Attributes
## - Size
## - Hash
## - Fuzzy Hash
## - Sample Type
## - Strings
## - Entropy
# PE Header Attributes Used in Malware Analysis
#
## PE File Header
## - Machine
## - Number of Sections
## - Pointer to Symbol Table
## - Number of Symbols
## - Size of Symbols
## - Size of Optional Headers
## - Characteristics
##
## Export Directory Table (EDT)
## - Name RVA
## - Ordinal Base
## - Adress Table Entries
## - Number of Name Pointers
## - Export Address Table RVA
## - Ordinal Table RVA
##
## Import Library Table (ILT)
## - Ordinal/Name Flag
## - Ordinal Number
## - Hint/Name Table RVA
##
## Optional Headers
## - Magic
## - SizeOfCode
## - SizeOfInitilizedData
## - SizeOfUninitializedData
## - EntryPoint
## - BaseOfCode
## - BaseOfData
## - ImageBase
## - SizeOfImage
## - SizeOfHeaders
## - DLLCharacteristics
## - NumberOfRVAsAndSizes
##
## Import Directory Table (IDT)
## - Import Lookup Table RVA
## - Name RVA
## - Import Address Table RVA
##
## Load Configuration Structure
## - SecurityCookie
## - SEHandlerTable
## - SEHandlerCount

def params():
    parser = argparse.ArgumentParser()
    parser.add_argument('files_location', help='Files location')
    params = parser.parse_args()
    return params.files_location

class PE:
    def __init__(self,filename):
        self.pe=pefile.PE(filename)
        return
    def getDOS_HEADER(self):
        return self.pe.DOS_HEADER
    def getFILE_HEADER(self):
        return self.pe.FILE_HEADER
    def getOPTIONAL_HEADER(self):
        return self.pe.OPTIONAL_HEADER
    def getPE_TYPE(self):
        return self.pe.PE_TYPE
    def getDIRECTORY_ENTRY_IMPORT(self):
        return self.pe.DIRECTORY_ENTRY_IMPORT
    def getDIRECTORY_ENTRY_EXPORT(self):
        return self.pe.DIRECTORY_ENTRY_EXPORT
    def getIdentify(self):
        # Load PE Signature Database & Sample PE
        db_path = "peid_userdb.txt"
        sigs=peutils.SignatureDatabase(data=open(db_path, 'rb').read())
        # Match PE against signature database
        matches=sigs.match_all(self.pe, ep_only=True)
        return matches

def feature_extraction(pefile):
    return pefile

def read_files(location):
    for root, dirs, files in os.walk(location):
        for f in sorted(files):
            if f.endswith(".exe"):
                file_loc = os.path.join(root, f)
                print f
                pe = PE(file_loc)
                print pe.getIdentify()

read_files(params())
